#!/usr/bin/env node

// Program bootstrap
var opts = {
  lib: {
    colors: require('colors'),
    commander: require('commander'),
    prompt: require('prompt'),
    fs: require('fs'),
    path: require('path'),
    trustOSS: require('../lib/trustoss')
  },
  pkg: require('../package.json'),
  helpers: {
    log: require('../helpers/log'),
    getGitRepo: require('../helpers/getGitRepo'),
    defaults: require('../helpers/defaults'),
    info: '[TrustOSS]'.green,
    warn: '[TrustOSS | WARNING]'.yellow,
    danger: '[TrustOSS | ERROR]'.red
  }
}
var lib = opts.lib
var helpers = opts.helpers

var program = lib.commander
var prompt = lib.prompt
var fs = lib.fs
var path = lib.path
var pkg = opts.pkg
var trustOSS = lib.trustOSS

var log = helpers.log
const info = helpers.info
const warn = helpers.warn
const danger = helpers.danger

var subcommand

var defaults = helpers.defaults({}, opts)

var prompts = {
  init: require('./prompt-1')({defaults: defaults}, opts)
}

var bootstrap = require('./bootstrap')
var lint = require('./lint')

prompt.message = info
prompt.delimiter = ': '

program
  .version(pkg.version)
  .usage('[init] [options]')
  .option('-d, --default', 'Use default configuration')
  .option('-b, --base [path]', 'Base documentation path [./docs]', './docs')
  .option('-y', 'Accept default configuration')
  .option('-c, --config [path]', 'Import TrustOSS configuration')
  .option('-o', 'Overwrite existing files (not recommended)')
  .option('-v, --verbose', 'Verbose')
  .arguments('<subcmd>')
  .action(function (subcmd) {
    subcommand = subcmd
  })
  .parse(process.argv)

if (program.verbose) {
  process.env.VERBOSE = true
}

log(info, 'cli v' + pkg.version)
console.log(program)

if (subcommand) {
  if (subcommand === 'init') {
    bootstrap({
      prompts: prompts
    }, opts)
  } else {
    log(danger, 'Unrecognized subcommand,', subcommand.yellow)
    program.outputHelp(function (txt) {
      return txt.red
    })
  }
} else {
  lint({}, opts)
}
