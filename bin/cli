#!/usr/bin/env node

// Set up default messages
require('colors')

const info = '[TrustOSS]'.green
const warn = '[TrustOSS | WARNING]'.yellow
const danger = '[TrustOSS | ERROR]'.red

// Program bootstrap
var program = require('commander')
var prompt = require('prompt')
var fs = require('fs')
var path = require('path')
prompt.message = info
prompt.delimiter = ': '
var pkg = require('../package.json')
var trustOSS = require('../lib/trustoss')

var subcommand
var opts = {}

var log = require('../helpers/log')

program
  .version(pkg.version)
  .usage('[init] [options]')
  .option('-d, --default', 'Use default configuration')
  .option('-b, --base [path]', 'Base documentation path [./docs]', './docs')
  .option('-y', 'Accept default configuration')
  .option('-c, --config [path]', 'Import TrustOSS configuration')
  .option('-v, --verbose', 'Verbose')
  .arguments('<subcmd>')
  .action(function (subcmd) {
    subcommand = subcmd
  })
  .parse(process.argv)

if (program.verbose) {
  process.env.VERBOSE = true
}

log(info, 'cli v' + pkg.version)

if (subcommand) {
  if (subcommand === 'init') {
    bootstrapEssentialFiles()
  } else {
    log(danger, 'Unrecognized subcommand,', subcommand.yellow)
    program.outputHelp(function (txt) {
      return txt.red
    })
  }
} else {
  triggerLint()
}

function bootstrapEssentialFiles () {
  log(info, 'Bootstrapping TrustOSS essential files.')
  // Interactive questions
  var cwd = process.cwd()
  var folder = cwd.split('/')
  folder = folder[folder.length - 1]
  prompt.start()

  var promptQs = {
    properties:{
      trustoss: {
        description: 'TrustOSS Spec Version', // Prompt displayed to the user. If not supplied name will be used.
        type: 'string', // Specify the type of input to expect.
        default: '0.1.0', // Default value to use if no value is entered.
        required: true                        // If true, value entered must be non-empty.
      },
      name: {
        description: 'Project Name', // Prompt displayed to the user. If not supplied name will be used.
        type: 'string', // Specify the type of input to expect.
        default: folder, // Default value to use if no value is entered.
        required: true                        // If true, value entered must be non-empty.
      },
      repository: {
        description: 'Project Repository', // Prompt displayed to the user. If not supplied name will be used.
        type: 'string', // Specify the type of input to expect.
        default: getGitRepo() // Default value to use if no value is entered.
      // required: true                        // If true, value entered must be non-empty.
      },
      status: {
        description: 'Project Status',
        type: 'string',
        default: 'beta',
        require: true
      },
      contact: {
        description: 'Main Contact (Team Lead)',
        type: 'string'
      },
      homepage: {
        description: 'Homepage',
        type: 'string'
      },
      docroot: {
        description: 'Root for Project Documents',
        type: 'string',
        default: 'docs/',
        require: true
      },
      readme: {
        description: 'Readme Type',
        type:'string',
        default: 'TrustOSS v0.1',
        require: true
      },
      contributing: {
        description: 'Contributing Guide Type',
        type:'string',
        default: 'TrustOSS v0.1',
        require: true
      },
      license: {
        description: 'License Type',
        type:'string',
        default: 'MIT',
        require: true // https://tldrlegal.com/license/mit-license
      },
      changelog: {
        description: 'Changelog Type',
        type: 'string',
        default: 'keepachangelog',
        require: true
      },
      coc: {
        description: 'Code of Conduct Type',
        type: 'string',
        default: 'Contributor Covenant',
        require: true
      },
      assets: {
        description: 'Include assets/ ?',
        type: 'string',
        default: 'Y/n',
        require: true
      },
      governance: {
        description: 'Include .governance/ ?',
        type: 'string',
        default: 'Y/n',
        require: true
      }
    }
  }

  prompt.get(promptQs, function (err, data) {
    if (err) throw err
    data.assets = data.assets.toLowerCase()
    data.assets = data.assets === 'y/n' ? 'yes' : data.assets
    data.assets = data.assets === 'y' ? 'yes' : data.assets
    data.assets = data.assets === 'n' ? 'no' : data.assets
    data.governance = data.governance.toLowerCase()
    data.governance = data.governance === 'y/n' ? 'yes' : data.governance
    data.governance = data.governance === 'y' ? 'yes' : data.governance
    data.governance = data.governance === 'n' ? 'no' : data.governance
    console.log(JSON.stringify(data, null, ' '))
    // build opts
    prompt.start()
    prompt.get([{properties:{
      verify:{
        description: 'Here\'s your configuration. Does this look right?',
        type: 'string',
        default: 'Y/n',
        required:true
    }}}], function(err, choice){
      if(err) throw data
      choice.verify = choice.verify.toLowerCase()
      choice.verify = choice.verify === 'y/n' ? 'yes' : choice.verify
      choice.verify = choice.verify === 'y' ? 'yes' : choice.verify
      choice.verify = choice.verify === 'n' ? 'no' : choice.verify
      if(choice.verify === 'yes'){
        if(data.assets === 'yes'){
          data.assets = './.assets'
        } else {
          delete data.assets
        }
        if(data.governance === 'yes'){
          data.governance = './.governance'
        } else {
          delete data.governance
        }
        data.readme_location = 'README.md'
        data.contributing_location = 'CONTRIBUTING.md'
        data.license_location = 'LICENSE.md'
        data.changelog_location = 'CHANGELOG.md'
        data.coc_location = 'CODEOFCONDUCT.md'
        data.readme_location = 'README.md'
        trustOSS.init(data)
      }
    })
    // then pass in opts
  })
}
function triggerLint () {
  log(info, 'Linting for TrustOSS documents.')
  // build opts

  // then pass in opts
  trustOSS.lint(opts)
}

function getGitRepo () {
  var gitConfigPath = [
    process.cwd(),
    '.git/config'
  ].join('/')
  var gconf = fs.readFileSync(gitConfigPath, 'utf8')
   // function (er, gconf) {
   //  if (er || !gconf) {
   //    return cb()
   //  }
    gconf = gconf.split(/\r?\n/)
    var i = gconf.indexOf('[remote "origin"]')
    if (i !== -1) {
      var url = gconf[i + 1]
      if (!url.match(/^\s*url =/)) u = gconf[i + 2]
      if (!url.match(/^\s*url =/)) u = null
      else url = url.replace(/^\s*url = /, '')
    }
    if (url && url.match(/^git@github.com:/))
      url = url.replace(/^git@github.com:/, 'https://github.com/')

    return url
  // })
}
