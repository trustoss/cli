#!/usr/bin/env node

// Program bootstrap
const opts = {
  lib: {
    colors: require('colors'),
    nopt: require('nopt'),
    stream: require('stream'),
    prompt: require('prompt'),
    fs: require('fs'),
    path: require('path'),
    trustOSS: require('../lib/trustoss')
  },
  pkg: require('../package.json'),
  helpers: {
    log: require('../helpers/log'),
    getGitRepo: require('../helpers/getGitRepo'),
    defaults: require('../helpers/defaults'),
    info: '[TrustOSS]'.green,
    warn: '[TrustOSS | WARNING]'.yellow,
    danger: '[TrustOSS | ERROR]'.red
  }
}
const lib = opts.lib
const helpers = opts.helpers

// const program = lib.commander
const prompt = lib.prompt
const fs = lib.fs
const path = lib.path
const pkg = opts.pkg
const trustOSS = lib.trustOSS

const log = helpers.log
const info = helpers.info
const warn = helpers.warn
const danger = helpers.danger

let subcommand

const defaults = helpers.defaults({}, opts)

const prompts = {
  init: require('./prompt-1')({defaults: defaults}, opts)
}

const bootstrap = require('./bootstrap')
const lint = require('./lint')

prompt.message = info
prompt.delimiter = ': '

var nopt = opts.lib.nopt
var Stream = opts.lib.stream.Stream
var knownOpts = {
  // 'foo': [String, null],
  // 'bar': [Stream, Number],
  'config': path,
  'version': Boolean,
  'verbose': Boolean,
  'help': Boolean
// 'bloo': [ 'big', 'medium', 'small' ],
// 'flag': Boolean,
// 'pick': Boolean,
// 'many1': [String, Array],
// 'many2': [path]
}
var shortHands = {
  'c': ['--config'],
  'v': ['--verbose'],
  'V': ['--version'],
  'h': ['--help'],
// 'b7': ['--bar', '7'],
// 'm': ['--bloo', 'medium'],
// 'p': ['--pick'],
// 'f': ['--flag']
}
// everything is optional.
// knownOpts and shorthands default to {}
// arg list defaults to process.argv
// slice defaults to 2
var parsed = nopt(knownOpts, shortHands, process.argv, 2)
console.log(parsed)

if (parsed.help) {
  console.log(`
${helpers.info} cli v${pkg.version}

Usage: trustoss [init] [options]

Options:

  -h, --help           output usage information
  -V, --version        output the version number
  -d, --default        Use default configuration
  -b, --base [path]    Base documentation path [./docs]
  -y                   Accept default configuration
  -c, --config [path]  TrustOSS configuration [.trustoss]
  -o                   Overwrite existing files (not recommended)
  -v, --verbose        Verbose`
  )
  process.exit(0)
}

if (parsed.version) {
  console.log(`
${helpers.info} cli v${pkg.version}
`)
}

// program.version(pkg.version)
// // program.usage('[init] [options]')
// // program.option('-d, --default', 'Use default configuration')
// // program.option('-b, --base [path]', 'Base documentation path [./docs]', './docs')
// // program.option('-y', 'Accept default configuration')
// // program.option('-c, --config [path]', 'TrustOSS configuration [.trustoss]', '.trustoss')
// // program.option('-o', 'Overwrite existing files (not recommended)')
// // program.option('-v, --verbose', 'Verbose')
// // program.arguments('<subcmd>')
// // program.action(function (subcmd) {
// //   subcommand = subcmd
// // })
// console.log(program)
// program.on('--help', function () {
//   console.log(`
// ${helpers.info} cli v ${pkg.version}

// Usage: trustoss [init] [options]

// Options:

//   -h, --help           output usage information
//   -V, --version        output the version number
//   -d, --default        Use default configuration
//   -b, --base [path]    Base documentation path [./docs]
//   -y                   Accept default configuration
//   -c, --config [path]  TrustOSS configuration [.trustoss]
//   -o                   Overwrite existing files (not recommended)
//   -v, --verbose        Verbose`
//   )
// })
// program.parse(process.argv)

// if (program.verbose) {
//   process.env.VERBOSE = true
// }

log(info, 'cli v' + pkg.version)
// console.log(program)

console.log('this is being run')

// if (subcommand) {
//   if (subcommand === 'init') {
//     bootstrap({
//       prompts: prompts
//     }, opts)
//   } else {
//     log(danger, 'Unrecognized subcommand,', subcommand.yellow)
//     program.outputHelp(function (txt) {
//       return txt.red
//     })
//   }
// } else {
//   lint({}, opts)
// }
